C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS

line level    source

   1          #include "G:\emc\project\at89c51xd2.h"
   1      =1  /*H***************************************************************************
   2      =1  * NAME: AT89C51XD2.h           
   3      =1  *----------------------------------------------------------------------------
   4      =1  * PURPOSE: SFR Description file for AT89C51xD2 products 
   5      =1  *                               ON KEIL compiler
   6      =1  *****************************************************************************/
   7      =1  
   8      =1  #define Sfr(x, y)               sfr x = y
   9      =1  #define Sbit(x, y, z)   sbit x = y^z
  10      =1  #define Sfr16(x,y)          sfr16 x = y
  11      =1  
  12      =1  /*----------------------------------------*/
  13      =1  /* Include file for 8051 SFR Definitions  */
  14      =1  /*----------------------------------------*/
  15      =1  
  16      =1  /*  BYTE Register  */
  17      =1  Sfr (P0 , 0x80);        
  18      =1  
  19      =1  Sbit (P0_7 , 0x80, 7);
  20      =1  Sbit (P0_6 , 0x80, 6);
  21      =1  Sbit (P0_5 , 0x80, 5);
  22      =1  Sbit (P0_4 , 0x80, 4);
  23      =1  Sbit (P0_3 , 0x80, 3);
  24      =1  Sbit (P0_2 , 0x80, 2);
  25      =1  Sbit (P0_1 , 0x80, 1);
  26      =1  Sbit (P0_0 , 0x80, 0);
  27      =1  
  28      =1  Sfr (P1 , 0x90);        
  29      =1  
  30      =1  Sbit (P1_7 , 0x90, 7);
  31      =1  Sbit (P1_6 , 0x90, 6);
  32      =1  Sbit (P1_5 , 0x90, 5);
  33      =1  Sbit (P1_4 , 0x90, 4);
  34      =1  Sbit (P1_3 , 0x90, 3);
  35      =1  Sbit (P1_2 , 0x90, 2);
  36      =1  Sbit (P1_1 , 0x90, 1);
  37      =1  Sbit (P1_0 , 0x90, 0);
  38      =1  
  39      =1  
  40      =1  
  41      =1  Sfr (P2 , 0xA0); 
  42      =1  Sbit (P2_7 , 0xA0, 7);
  43      =1  Sbit (P2_6 , 0xA0, 6);
  44      =1  Sbit (P2_5 , 0xA0, 5);
  45      =1  Sbit (P2_4 , 0xA0, 4);
  46      =1  Sbit (P2_3 , 0xA0, 3);
  47      =1  Sbit (P2_2 , 0xA0, 2);
  48      =1  Sbit (P2_1 , 0xA0, 1);
  49      =1  Sbit (P2_0 , 0xA0, 0);
  50      =1  
  51      =1         
  52      =1  Sfr (P3 , 0xB0);        
  53      =1  
  54      =1  Sbit (P3_7 , 0xB0, 7);
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 2   

  55      =1  Sbit (P3_6 , 0xB0, 6);
  56      =1  Sbit (P3_5 , 0xB0, 5);
  57      =1  Sbit (P3_4 , 0xB0, 4);
  58      =1  Sbit (P3_3 , 0xB0, 3);
  59      =1  Sbit (P3_2 , 0xB0, 2);
  60      =1  Sbit (P3_1 , 0xB0, 1);
  61      =1  Sbit (P3_0 , 0xB0, 0);
  62      =1  
  63      =1  Sbit (RD , 0xB0, 7);
  64      =1  Sbit (WR , 0xB0, 6);
  65      =1  Sbit (T1 , 0xB0, 5);
  66      =1  Sbit (T0 , 0xB0, 4);
  67      =1  Sbit (INT1 , 0xB0, 3);
  68      =1  Sbit (INT0 , 0xB0, 2);
  69      =1  Sbit (TXD , 0xB0, 1);
  70      =1  Sbit (RXD , 0xB0, 0);
  71      =1  
  72      =1  Sfr (P4 , 0xC0);        
  73      =1  Sbit (P4_7 , 0xC0, 7);
  74      =1  Sbit (P4_6 , 0xC0, 6);
  75      =1  Sbit (P4_5 , 0xC0, 5);
  76      =1  Sbit (P4_4 , 0xC0, 4);
  77      =1  Sbit (P4_3 , 0xC0, 3);
  78      =1  Sbit (P4_2 , 0xC0, 2);
  79      =1  Sbit (P4_1 , 0xC0, 1);
  80      =1  Sbit (P4_0 , 0xC0, 0);
  81      =1  
  82      =1  Sfr (P5 , 0xE8);        
  83      =1  Sbit (P5_7 , 0xE8, 7);
  84      =1  Sbit (P5_6 , 0xE8, 6);
  85      =1  Sbit (P5_5 , 0xE8, 5);
  86      =1  Sbit (P5_4 , 0xE8, 4);
  87      =1  Sbit (P5_3 , 0xE8, 3);
  88      =1  Sbit (P5_2 , 0xE8, 2);
  89      =1  Sbit (P5_1 , 0xE8, 1);
  90      =1  Sbit (P5_0 , 0xE8, 0);
  91      =1  
  92      =1      
  93      =1  Sfr (PSW , 0xD0);       
  94      =1  
  95      =1  Sbit (CY  , 0xD0  , 7);
  96      =1  Sbit (AC  , 0xD0  , 6);
  97      =1  Sbit (F0  , 0xD0  , 5);
  98      =1  Sbit (RS1 , 0xD0  , 4);
  99      =1  Sbit (RS0 , 0xD0  , 3);
 100      =1  Sbit (OV  , 0xD0  , 2);
 101      =1  Sbit (UD  , 0xD0  , 1);
 102      =1  Sbit (P   , 0xD0  , 0);
 103      =1  
 104      =1  Sfr (ACC , 0xE0);       
 105      =1  Sfr (B , 0xF0); 
 106      =1  Sfr (SP , 0x81);        
 107      =1  Sfr (DPL , 0x82);       
 108      =1  Sfr (DPH , 0x83);       
 109      =1  
 110      =1  Sfr (PCON , 0x87);      
 111      =1  Sfr (CKCON0 , 0x8F);     
 112      =1  Sfr (CKCON1 , 0xAF);
 113      =1  
 114      =1  /*------------------ TIMERS registers ---------------------*/
 115      =1  Sfr (TCON , 0x88);
 116      =1  Sbit (TF1 , 0x88, 7);
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 3   

 117      =1  Sbit (TR1 , 0x88, 6);
 118      =1  Sbit (TF0 , 0x88, 5);
 119      =1  Sbit (TR0 , 0x88, 4);
 120      =1  Sbit (IE1 , 0x88, 3);
 121      =1  Sbit (IT1 , 0x88, 2);
 122      =1  Sbit (IE0 , 0x88, 1);
 123      =1  Sbit (IT0 , 0x88, 0);
 124      =1          
 125      =1  Sfr (TMOD , 0x89);      
 126      =1  
 127      =1  Sfr  (T2CON , 0xC8);
 128      =1  Sbit (TF2   , 0xC8, 7);
 129      =1  Sbit (EXF2  , 0xC8, 6);
 130      =1  Sbit (RCLK  , 0xC8, 5);
 131      =1  Sbit (TCLK  , 0xC8, 4);
 132      =1  Sbit (EXEN2 , 0xC8, 3);
 133      =1  Sbit (TR2   , 0xC8, 2);
 134      =1  Sbit (C_T2  , 0xC8, 1);
 135      =1  Sbit (CP_RL2, 0xC8, 0);
 136      =1          
 137      =1  Sfr (T2MOD , 0xC9);     
 138      =1  Sfr (TL0 , 0x8A);       
 139      =1  Sfr (TL1 , 0x8B);       
 140      =1  Sfr (TL2 , 0xCC);       
 141      =1  Sfr (TH0 , 0x8C);       
 142      =1  Sfr (TH1 , 0x8D);       
 143      =1  Sfr (TH2 , 0xCD);       
 144      =1  Sfr (RCAP2L , 0xCA);    
 145      =1  Sfr (RCAP2H , 0xCB);    
 146      =1  Sfr (WDTRST , 0xA6);    
 147      =1  Sfr (WDTPRG , 0xA7);    
 148      =1  
 149      =1  
 150      =1  /*------------------- UART registers ------------------------*/
 151      =1  Sfr (SCON , 0x98);      
 152      =1  Sbit (SM0  , 0x98, 7);
 153      =1  Sbit (FE   , 0x98, 7);
 154      =1  Sbit (SM1  , 0x98, 6);
 155      =1  Sbit (SM2  , 0x98, 5);
 156      =1  Sbit (REN  , 0x98, 4);
 157      =1  Sbit (TB8  , 0x98, 3);
 158      =1  Sbit (RB8  , 0x98, 2);
 159      =1  Sbit (TI   , 0x98, 1);
 160      =1  Sbit (RI   , 0x98, 0);
 161      =1  
 162      =1  Sfr (SBUF , 0x99);      
 163      =1  Sfr (SADEN , 0xB9);     
 164      =1  Sfr (SADDR , 0xA9);     
 165      =1  
 166      =1  /*-------------------- Internal Baud Rate Generator --------*/
 167      =1  Sfr (BRL        , 0x9A);      
 168      =1  Sfr (BDRCON , 0x9B);      
 169      =1  
 170      =1  
 171      =1  
 172      =1  /*-------------------- IT registers -----------------------*/
 173      =1  Sfr (IEN0  , 0xA8);      
 174      =1  Sfr (IEN1  , 0xB1);      
 175      =1  Sfr (IPH0 , 0xB7);      
 176      =1  Sfr (IPH1 , 0xB3);      
 177      =1  Sfr (IPL0 , 0xB8);      
 178      =1  Sfr (IPL1 , 0xB2);      
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 4   

 179      =1  
 180      =1  
 181      =1  
 182      =1  /*  IEN0  */
 183      =1  Sbit (EA   , 0xA8, 7);
 184      =1  Sbit (EC   , 0xA8, 6);
 185      =1  Sbit (ET2  , 0xA8, 5);
 186      =1  Sbit (ES   , 0xA8, 4);
 187      =1  Sbit (ET1  , 0xA8, 3);
 188      =1  Sbit (EX1  , 0xA8, 2);
 189      =1  Sbit (ET0  , 0xA8, 1);
 190      =1  Sbit (EX0  , 0xA8, 0);
 191      =1  
 192      =1  
 193      =1  /*--------------------- PCA registers -----------------------------*/
 194      =1  Sfr (CCON , 0xD8);      
 195      =1  Sfr (CMOD , 0xD9);      
 196      =1  Sfr (CH , 0xF9);        
 197      =1  Sfr (CL , 0xE9);        
 198      =1  Sfr (CCAP0H  , 0xFA);   
 199      =1  Sfr (CCAP0L  , 0xEA);   
 200      =1  Sfr (CCAPM0  , 0xDA);   
 201      =1  Sfr (CCAP1H  , 0xFB);   
 202      =1  Sfr (CCAP1L  , 0xEB);   
 203      =1  Sfr (CCAPM1  , 0xDB);   
 204      =1  Sfr (CCAP2H  , 0xFC);   
 205      =1  Sfr (CCAP2L  , 0xEC);   
 206      =1  Sfr (CCAPM2  , 0xDC);   
 207      =1  Sfr (CCAP3H  , 0xFD);   
 208      =1  Sfr (CCAP3L  , 0xED);   
 209      =1  Sfr (CCAPM3  , 0xDD);   
 210      =1  Sfr (CCAP4H  , 0xFE);   
 211      =1  Sfr (CCAP4L  , 0xEE);   
 212      =1  Sfr (CCAPM4  , 0xDE);   
 213      =1  /* CCON */
 214      =1  Sbit (CF   , 0xD8, 7);
 215      =1  Sbit (CR   , 0xD8, 6);
 216      =1  
 217      =1  Sbit (CCF4   , 0xD8, 4);
 218      =1  Sbit (CCF3  , 0xD8, 3);
 219      =1  Sbit (CCF2  , 0xD8, 2);
 220      =1  Sbit (CCF1  , 0xD8, 1);
 221      =1  Sbit (CCF0  , 0xD8, 0);
 222      =1  
 223      =1  
 224      =1  /*------------------ T W I registers ------------------------------*/
 225      =1  Sfr ( SSCON , 0x93);
 226      =1  Sfr ( SSCS , 0x94);
 227      =1  Sfr ( SSDAT , 0x95);
 228      =1  Sfr ( SSADR , 0x96);
 229      =1  Sfr ( PI2       , 0xF8);        
 230      =1  Sbit (PI2_1  , 0xF8, 1);
 231      =1  Sbit (PI2_0  , 0xF8, 0);
 232      =1  
 233      =1  /*-------------------- OSC control registers ----------------------*/
 234      =1  Sfr ( CKSEL , 0x85 );
 235      =1  Sfr ( OSCCON , 0x86 );
 236      =1  Sfr ( CKRL , 0x97 );
 237      =1  
 238      =1  /*-------------------- Keyboard control registers -----------------*/
 239      =1  Sfr ( KBLS , 0x9C );
 240      =1  Sfr ( KBE , 0x9D );
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 5   

 241      =1  Sfr ( KBF , 0x9E );
 242      =1  /*-------------------- SPI ---------------------- -----------------*/
 243      =1  Sfr ( SPCON, 0xC3 );
 244      =1  Sfr ( SPSTA, 0xC4 );
 245      =1  Sfr ( SPDAT, 0xC5 );
 246      =1  
 247      =1  /*------ Misc ----------------------------------------------------*/
 248      =1  Sfr     ( AUXR , 0x8E);
 249      =1  Sfr ( AUXR1, 0xA2);
 250      =1  Sfr ( FCON, 0xD1);
 251      =1  
 252      =1  
 253      =1  /*------ E data --------------------------------------------------*/
 254      =1  
 255      =1  Sfr ( EECON,  0xD2 );
 256      =1  
 257      =1  
 258      =1  
 259      =1  
 260      =1  
 261      =1  
 262      =1  
 263      =1  
 264      =1  
   2          unsigned char temp1;
   3          unsigned char temp2;
   4          unsigned char LCD_CODE[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   5          sbit dc1=P0^6;
   6          sbit dc2=P0^7;
   7          unsigned char wc[8]="Welcome!";
   8          unsigned char en[15]="Enter Password.";
   9          unsigned char grant[15]="Access Granted!";
  10          unsigned char deny[14]="Access Denied!";
  11          unsigned char i;
  12          unsigned char pass[5]="abcde";
  13          unsigned char ip[5]="";
  14          
  15          void lcd_init();
  16          void clear_lcd();
  17          void lcd_comm();
  18          void lcd_data();
  19          void print_wc();
  20          int strcheck(char [], char []);
  21          void print_enter();
  22          void print_grant();
  23          void print_deny();
  24          void Tdelay();
  25          void hex_input();
  26          void lock();
  27          void unlock();
  28          
  29          
  30          void main()
  31          {
  32   1              print_wc();
  33   1              for(i=0;i<3;i++)
  34   1                      Tdelay();
  35   1              while(1)
  36   1              {
  37   2                      print_enter();
  38   2                      temp1=0xc4;
  39   2                      lcd_comm();
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 6   

  40   2                      hex_input();
  41   2                      Tdelay();
  42   2                      if(strcheck(pass,ip)==0)
  43   2                      {       
  44   3                              print_grant();
  45   3                              unlock();
  46   3                              for(i=0;i<5;i++)
  47   3                                      Tdelay();
  48   3                              lock();
  49   3                      }
  50   2                      else
  51   2                      {
  52   3                              print_deny();
  53   3                              for(i=0;i<3;i++)
  54   3                                      Tdelay();
  55   3                      }
  56   2              }
  57   1      }
  58          
  59          
  60          void print_wc()
  61          {
  62   1              lcd_init();
  63   1              clear_lcd();
  64   1              temp1=0x80;
  65   1              lcd_comm();
  66   1              for(i=0;i<8;i++)
  67   1              {
  68   2                      temp2=wc[i];
  69   2                      lcd_data();
  70   2              }
  71   1      }
  72          
  73          
  74          void print_enter()
  75          {
  76   1              lcd_init();             //check
  77   1              clear_lcd();
  78   1              temp1=0x80;
  79   1              lcd_comm();
  80   1              for(i=0;i<15;i++)
  81   1              {
  82   2                      temp2=en[i];
  83   2                      lcd_data();
  84   2              }
  85   1      }
  86          
  87          void print_grant()
  88          {
  89   1              lcd_init();             //check
  90   1              clear_lcd();
  91   1              temp1=0x80;
  92   1              lcd_comm();
  93   1              for(i=0;i<15;i++)
  94   1              {
  95   2                      temp2=grant[i];
  96   2                      lcd_data();
  97   2              }
  98   1      }
  99          
 100          void print_deny()
 101          {
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 7   

 102   1              lcd_init();             //check
 103   1              clear_lcd();
 104   1              temp1=0x80;
 105   1              lcd_comm();
 106   1              for(i=0;i<14;i++)
 107   1              {
 108   2                      temp2=deny[i];
 109   2                      lcd_data();
 110   2              }
 111   1      }
 112          
 113          
 114          
 115          
 116          void Tdelay()
 117          {
 118   1              int i;
 119   1              //71.1ms x 14 = 1s delay
 120   1              TMOD=0x01;
 121   1              for(i=0;i<14;i++)
 122   1              {
 123   2                      TL0=0x00;
 124   2                      TH0=0x00;
 125   2                      TR0=1;
 126   2                      while(!TF0);
 127   2                      TR0=0;
 128   2                      TF0=0;
 129   2              }
 130   1      }
 131          
 132          void hex_input()
 133          {
 134   1              int x=0;
 135   1              unsigned char key,row,col,mask,val;
 136   1              do{
 137   2                      for(row=0x00;row<=0x03;++row)
 138   2                      {
 139   3                              P0=~(0x01<<row);
 140   3                              key=P0;
 141   3                              if((key&0xF0)!=0xF0)
 142   3                              {
 143   4                                      for(mask=0x10,col=0x00;mask&key;mask<<=1)
 144   4                                      ++col;
 145   4                                      val=col*4+row;
 146   4                                      ip[i]=LCD_CODE[val];
 147   4                                      i++;
 148   4                                      temp2='X';
 149   4                                      lcd_data();     
 150   4                              }
 151   3                      }
 152   2              }while(x<5);
 153   1      }
 154          
 155          int strcheck(char a[],char b[])
 156          {
 157   1              int c;
 158   1              int flag=0;
 159   1              for(c=0;c<5;c++)
 160   1              {
 161   2                      if(a[c]!=b[c])
 162   2                               flag=1;
 163   2              }
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 8   

 164   1              return flag;
 165   1      }
 166          
 167          void lock()
 168          {
 169   1              int i;
 170   1              dc1=0;
 171   1              dc2=1;
 172   1              for(i=0;i<3;i++)
 173   1                      Tdelay();
 174   1              dc1=1;
 175   1              dc2=1;
 176   1      }
 177          
 178          void unlock()
 179          {
 180   1              int i;
 181   1              dc1=1;
 182   1              dc2=0;
 183   1              for(i=0;i<3;i++)
 184   1                      Tdelay();
 185   1              dc1=1;
 186   1              dc2=1;
 187   1      }
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
0000 120000      R     LCALL   print_wc
                                           ; SOURCE LINE # 33
0003 E4                CLR     A
0004 F500        R     MOV     i,A
0006         ?C0001:
                                           ; SOURCE LINE # 34
0006 120000      R     LCALL   Tdelay
0009 0500        R     INC     i
000B E500        R     MOV     A,i
000D C3                CLR     C
000E 9403              SUBB    A,#03H
0010 40F4              JC      ?C0001
0012         ?C0004:
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0012 120000      R     LCALL   print_enter
                                           ; SOURCE LINE # 38
0015 7500C4      R     MOV     temp1,#0C4H
                                           ; SOURCE LINE # 39
0018 120000      E     LCALL   lcd_comm
                                           ; SOURCE LINE # 40
001B 120000      R     LCALL   hex_input
                                           ; SOURCE LINE # 41
001E 120000      R     LCALL   Tdelay
                                           ; SOURCE LINE # 42
0021 750000      R     MOV     ?_strcheck?BYTE+03H,#00H
0024 750000      R     MOV     ?_strcheck?BYTE+04H,#HIGH ip
0027 750000      R     MOV     ?_strcheck?BYTE+05H,#LOW ip
002A 7B00              MOV     R3,#00H
002C 7A00        R     MOV     R2,#HIGH pass
002E 7900        R     MOV     R1,#LOW pass
0030 120000      R     LCALL   _strcheck
0033 EF                MOV     A,R7
0034 4E                ORL     A,R6
0035 701A              JNZ     ?C0006
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
0037 120000      R     LCALL   print_grant
                                           ; SOURCE LINE # 45
003A 120000      R     LCALL   unlock
                                           ; SOURCE LINE # 46
003D E4                CLR     A
003E F500        R     MOV     i,A
0040         ?C0007:
                                           ; SOURCE LINE # 47
0040 120000      R     LCALL   Tdelay
0043 0500        R     INC     i
0045 E500        R     MOV     A,i
0047 C3                CLR     C
0048 9405              SUBB    A,#05H
004A 40F4              JC      ?C0007
004C         ?C0008:
                                           ; SOURCE LINE # 48
004C 120000      R     LCALL   lock
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 10  

                                           ; SOURCE LINE # 49
004F 80C1              SJMP    ?C0004
0051         ?C0006:
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0051 120000      R     LCALL   print_deny
                                           ; SOURCE LINE # 53
0054 E4                CLR     A
0055 F500        R     MOV     i,A
0057         ?C0011:
0057 E500        R     MOV     A,i
0059 C3                CLR     C
005A 9403              SUBB    A,#03H
005C 50B4              JNC     ?C0004
                                           ; SOURCE LINE # 54
005E 120000      R     LCALL   Tdelay
0061 0500        R     INC     i
0063 80F2              SJMP    ?C0011
             ; FUNCTION main (END)

             ; FUNCTION print_wc (BEGIN)
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
0000 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 63
0003 120000      E     LCALL   clear_lcd
                                           ; SOURCE LINE # 64
0006 750080      R     MOV     temp1,#080H
                                           ; SOURCE LINE # 65
0009 120000      E     LCALL   lcd_comm
                                           ; SOURCE LINE # 66
000C E4                CLR     A
000D F500        R     MOV     i,A
000F         ?C0015:
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
000F 7400        R     MOV     A,#LOW wc
0011 2500        R     ADD     A,i
0013 F8                MOV     R0,A
0014 E6                MOV     A,@R0
0015 F500        R     MOV     temp2,A
                                           ; SOURCE LINE # 69
0017 120000      E     LCALL   lcd_data
                                           ; SOURCE LINE # 70
001A 0500        R     INC     i
001C E500        R     MOV     A,i
001E C3                CLR     C
001F 9408              SUBB    A,#08H
0021 40EC              JC      ?C0015
                                           ; SOURCE LINE # 71
0023         ?C0018:
0023 22                RET     
             ; FUNCTION print_wc (END)

             ; FUNCTION print_enter (BEGIN)
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 77
0003 120000      E     LCALL   clear_lcd
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 11  

                                           ; SOURCE LINE # 78
0006 750080      R     MOV     temp1,#080H
                                           ; SOURCE LINE # 79
0009 120000      E     LCALL   lcd_comm
                                           ; SOURCE LINE # 80
000C E4                CLR     A
000D F500        R     MOV     i,A
000F         ?C0019:
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
000F 7400        R     MOV     A,#LOW en
0011 2500        R     ADD     A,i
0013 F8                MOV     R0,A
0014 E6                MOV     A,@R0
0015 F500        R     MOV     temp2,A
                                           ; SOURCE LINE # 83
0017 120000      E     LCALL   lcd_data
                                           ; SOURCE LINE # 84
001A 0500        R     INC     i
001C E500        R     MOV     A,i
001E C3                CLR     C
001F 940F              SUBB    A,#0FH
0021 40EC              JC      ?C0019
                                           ; SOURCE LINE # 85
0023         ?C0022:
0023 22                RET     
             ; FUNCTION print_enter (END)

             ; FUNCTION print_grant (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0000 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 90
0003 120000      E     LCALL   clear_lcd
                                           ; SOURCE LINE # 91
0006 750080      R     MOV     temp1,#080H
                                           ; SOURCE LINE # 92
0009 120000      E     LCALL   lcd_comm
                                           ; SOURCE LINE # 93
000C E4                CLR     A
000D F500        R     MOV     i,A
000F         ?C0023:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
000F 7400        R     MOV     A,#LOW grant
0011 2500        R     ADD     A,i
0013 F8                MOV     R0,A
0014 E6                MOV     A,@R0
0015 F500        R     MOV     temp2,A
                                           ; SOURCE LINE # 96
0017 120000      E     LCALL   lcd_data
                                           ; SOURCE LINE # 97
001A 0500        R     INC     i
001C E500        R     MOV     A,i
001E C3                CLR     C
001F 940F              SUBB    A,#0FH
0021 40EC              JC      ?C0023
                                           ; SOURCE LINE # 98
0023         ?C0026:
0023 22                RET     
             ; FUNCTION print_grant (END)
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 12  


             ; FUNCTION print_deny (BEGIN)
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
0000 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 103
0003 120000      E     LCALL   clear_lcd
                                           ; SOURCE LINE # 104
0006 750080      R     MOV     temp1,#080H
                                           ; SOURCE LINE # 105
0009 120000      E     LCALL   lcd_comm
                                           ; SOURCE LINE # 106
000C E4                CLR     A
000D F500        R     MOV     i,A
000F         ?C0027:
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
000F 7400        R     MOV     A,#LOW deny
0011 2500        R     ADD     A,i
0013 F8                MOV     R0,A
0014 E6                MOV     A,@R0
0015 F500        R     MOV     temp2,A
                                           ; SOURCE LINE # 109
0017 120000      E     LCALL   lcd_data
                                           ; SOURCE LINE # 110
001A 0500        R     INC     i
001C E500        R     MOV     A,i
001E C3                CLR     C
001F 940E              SUBB    A,#0EH
0021 40EC              JC      ?C0027
                                           ; SOURCE LINE # 111
0023         ?C0030:
0023 22                RET     
             ; FUNCTION print_deny (END)

             ; FUNCTION Tdelay (BEGIN)
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 120
0000 758901            MOV     TMOD,#01H
                                           ; SOURCE LINE # 121
;---- Variable 'i' assigned to Register 'R6/R7' ----
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005 FE                MOV     R6,A
0006         ?C0031:
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0006 E4                CLR     A
0007 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 124
0009 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 125
000B D28C              SETB    TR0
000D         ?C0034:
                                           ; SOURCE LINE # 126
000D 308DFD            JNB     TF0,?C0034
0010         ?C0035:
                                           ; SOURCE LINE # 127
0010 C28C              CLR     TR0
                                           ; SOURCE LINE # 128
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 13  

0012 C28D              CLR     TF0
                                           ; SOURCE LINE # 129
0014 0F                INC     R7
0015 BF0001            CJNE    R7,#00H,?C0061
0018 0E                INC     R6
0019         ?C0061:
0019 EF                MOV     A,R7
001A 640E              XRL     A,#0EH
001C 4E                ORL     A,R6
001D 70E7              JNZ     ?C0031
                                           ; SOURCE LINE # 130
001F         ?C0036:
001F 22                RET     
             ; FUNCTION Tdelay (END)

             ; FUNCTION hex_input (BEGIN)
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0000 E4                CLR     A
0001 F500        R     MOV     x,A
0003 F500        R     MOV     x+01H,A
0005         ?C0039:
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0005 E4                CLR     A
0006 F500        R     MOV     row,A
0008         ?C0040:
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0008 AF00        R     MOV     R7,row
000A 7401              MOV     A,#01H
000C A807              MOV     R0,AR7
000E 08                INC     R0
000F 8002              SJMP    ?C0063
0011         ?C0062:
0011 C3                CLR     C
0012 33                RLC     A
0013         ?C0063:
0013 D8FC              DJNZ    R0,?C0062
0015 F4                CPL     A
0016 F580              MOV     P0,A
                                           ; SOURCE LINE # 140
;---- Variable 'key' assigned to Register 'R7' ----
0018 AF80              MOV     R7,P0
                                           ; SOURCE LINE # 141
001A EF                MOV     A,R7
001B 54F0              ANL     A,#0F0H
001D 64F0              XRL     A,#0F0H
001F 602A              JZ      ?C0042
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
;---- Variable 'mask' assigned to Register 'R6' ----
0021 7E10              MOV     R6,#010H
;---- Variable 'col' assigned to Register 'R5' ----
0023 E4                CLR     A
0024 FD                MOV     R5,A
0025         ?C0044:
0025 EE                MOV     A,R6
0026 5F                ANL     A,R7
0027 6007              JZ      ?C0045
                                           ; SOURCE LINE # 144
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 14  

0029 0D                INC     R5
002A EE                MOV     A,R6
002B 25E0              ADD     A,ACC
002D FE                MOV     R6,A
002E 80F5              SJMP    ?C0044
0030         ?C0045:
                                           ; SOURCE LINE # 145
0030 ED                MOV     A,R5
0031 25E0              ADD     A,ACC
0033 25E0              ADD     A,ACC
0035 2500        R     ADD     A,row
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 146
0037 2400        R     ADD     A,#LOW LCD_CODE
0039 F8                MOV     R0,A
003A E6                MOV     A,@R0
003B FF                MOV     R7,A
003C 7400        R     MOV     A,#LOW ip
003E 2500        R     ADD     A,i
0040 F8                MOV     R0,A
0041 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 147
0043 0500        R     INC     i
                                           ; SOURCE LINE # 148
0045 750058      R     MOV     temp2,#058H
                                           ; SOURCE LINE # 149
0048 120000      E     LCALL   lcd_data
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
004B         ?C0042:
004B 0500        R     INC     row
004D E500        R     MOV     A,row
004F D3                SETB    C
0050 9403              SUBB    A,#03H
0052 40B4              JC      ?C0040
                                           ; SOURCE LINE # 152
0054         ?C0037:
0054 C3                CLR     C
0055 E500        R     MOV     A,x+01H
0057 9405              SUBB    A,#05H
0059 E500        R     MOV     A,x
005B 6480              XRL     A,#080H
005D 9480              SUBB    A,#080H
005F 40A4              JC      ?C0039
                                           ; SOURCE LINE # 153
0061 22                RET     
             ; FUNCTION hex_input (END)

             ; FUNCTION _strcheck (BEGIN)
                                           ; SOURCE LINE # 155
0000 8B00        R     MOV     a,R3
0002 8A00        R     MOV     a+01H,R2
0004 8900        R     MOV     a+02H,R1
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 158
0006 E4                CLR     A
0007 F500        R     MOV     flag,A
0009 F500        R     MOV     flag+01H,A
                                           ; SOURCE LINE # 159
;---- Variable 'c' assigned to Register 'R6/R7' ----
000B FF                MOV     R7,A
000C FE                MOV     R6,A
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 15  

000D         ?C0048:
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
000D AB00        R     MOV     R3,b
000F AA00        R     MOV     R2,b+01H
0011 A900        R     MOV     R1,b+02H
0013 8F82              MOV     DPL,R7
0015 8E83              MOV     DPH,R6
0017 120000      E     LCALL   ?C?CLDOPTR
001A FD                MOV     R5,A
001B AB00        R     MOV     R3,a
001D AA00        R     MOV     R2,a+01H
001F A900        R     MOV     R1,a+02H
0021 8F82              MOV     DPL,R7
0023 8E83              MOV     DPH,R6
0025 120000      E     LCALL   ?C?CLDOPTR
0028 6D                XRL     A,R5
0029 6006              JZ      ?C0050
                                           ; SOURCE LINE # 162
002B 750000      R     MOV     flag,#00H
002E 750001      R     MOV     flag+01H,#01H
                                           ; SOURCE LINE # 163
0031         ?C0050:
0031 0F                INC     R7
0032 BF0001            CJNE    R7,#00H,?C0064
0035 0E                INC     R6
0036         ?C0064:
0036 EF                MOV     A,R7
0037 6405              XRL     A,#05H
0039 4E                ORL     A,R6
003A 70D1              JNZ     ?C0048
003C         ?C0049:
                                           ; SOURCE LINE # 164
003C AE00        R     MOV     R6,flag
003E AF00        R     MOV     R7,flag+01H
                                           ; SOURCE LINE # 165
0040         ?C0052:
0040 22                RET     
             ; FUNCTION _strcheck (END)

             ; FUNCTION lock (BEGIN)
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
0000 C286              CLR     dc1
                                           ; SOURCE LINE # 171
0002 D287              SETB    dc2
                                           ; SOURCE LINE # 172
;---- Variable 'i' assigned to Register 'R4/R5' ----
0004 E4                CLR     A
0005 FD                MOV     R5,A
0006 FC                MOV     R4,A
0007         ?C0053:
                                           ; SOURCE LINE # 173
0007 120000      R     LCALL   Tdelay
000A 0D                INC     R5
000B BD0001            CJNE    R5,#00H,?C0065
000E 0C                INC     R4
000F         ?C0065:
000F ED                MOV     A,R5
0010 6403              XRL     A,#03H
0012 4C                ORL     A,R4
C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 16  

0013 70F2              JNZ     ?C0053
0015         ?C0054:
                                           ; SOURCE LINE # 174
0015 D286              SETB    dc1
                                           ; SOURCE LINE # 175
0017 D287              SETB    dc2
                                           ; SOURCE LINE # 176
0019 22                RET     
             ; FUNCTION lock (END)

             ; FUNCTION unlock (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
0000 D286              SETB    dc1
                                           ; SOURCE LINE # 182
0002 C287              CLR     dc2
                                           ; SOURCE LINE # 183
;---- Variable 'i' assigned to Register 'R4/R5' ----
0004 E4                CLR     A
0005 FD                MOV     R5,A
0006 FC                MOV     R4,A
0007         ?C0057:
                                           ; SOURCE LINE # 184
0007 120000      R     LCALL   Tdelay
000A 0D                INC     R5
000B BD0001            CJNE    R5,#00H,?C0066
000E 0C                INC     R4
000F         ?C0066:
000F ED                MOV     A,R5
0010 6403              XRL     A,#03H
0012 4C                ORL     A,R4
0013 70F2              JNZ     ?C0057
0015         ?C0058:
                                           ; SOURCE LINE # 185
0015 D286              SETB    dc1
                                           ; SOURCE LINE # 186
0017 D287              SETB    dc2
                                           ; SOURCE LINE # 187
0019 22                RET     
             ; FUNCTION unlock (END)

C51 COMPILER V7.50   MAIN                                                                  04/01/2019 21:14:38 PAGE 17  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
unlock . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
clear_lcd. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
grant. . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  15
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
lock . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
print_grant. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
lcd_data . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
print_enter. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
deny . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    000FH  14
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
pass . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    001DH  5
_strcheck. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  a. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  b. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  flag . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
print_deny . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
lcd_comm . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
lcd_init . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
LCD_CODE . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0022H  16
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
en . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0032H  15
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
ip . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0041H  5
hex_input. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  key. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  row. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  col. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  mask . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
wc . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0046H  8
Tdelay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
i. . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   004EH  1
temp1. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   004FH  1
temp2. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0050H  1
print_wc . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
dc1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
dc2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    492    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     81      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
