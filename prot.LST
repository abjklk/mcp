C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE PROT
OBJECT MODULE PLACED IN prot.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE prot.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS

line level    source

   1          #include "G:\emc\at89c51xd2.h"
   1      =1  /*H***************************************************************************
   2      =1  * NAME: AT89C51XD2.h           
   3      =1  *----------------------------------------------------------------------------
   4      =1  * PURPOSE: SFR Description file for AT89C51xD2 products 
   5      =1  *                               ON KEIL compiler
   6      =1  *****************************************************************************/
   7      =1  
   8      =1  #define Sfr(x, y)               sfr x = y
   9      =1  #define Sbit(x, y, z)   sbit x = y^z
  10      =1  #define Sfr16(x,y)          sfr16 x = y
  11      =1  
  12      =1  /*----------------------------------------*/
  13      =1  /* Include file for 8051 SFR Definitions  */
  14      =1  /*----------------------------------------*/
  15      =1  
  16      =1  /*  BYTE Register  */
  17      =1  Sfr (P0 , 0x80);        
  18      =1  
  19      =1  Sbit (P0_7 , 0x80, 7);
  20      =1  Sbit (P0_6 , 0x80, 6);
  21      =1  Sbit (P0_5 , 0x80, 5);
  22      =1  Sbit (P0_4 , 0x80, 4);
  23      =1  Sbit (P0_3 , 0x80, 3);
  24      =1  Sbit (P0_2 , 0x80, 2);
  25      =1  Sbit (P0_1 , 0x80, 1);
  26      =1  Sbit (P0_0 , 0x80, 0);
  27      =1  
  28      =1  Sfr (P1 , 0x90);        
  29      =1  
  30      =1  Sbit (P1_7 , 0x90, 7);
  31      =1  Sbit (P1_6 , 0x90, 6);
  32      =1  Sbit (P1_5 , 0x90, 5);
  33      =1  Sbit (P1_4 , 0x90, 4);
  34      =1  Sbit (P1_3 , 0x90, 3);
  35      =1  Sbit (P1_2 , 0x90, 2);
  36      =1  Sbit (P1_1 , 0x90, 1);
  37      =1  Sbit (P1_0 , 0x90, 0);
  38      =1  
  39      =1  
  40      =1  
  41      =1  Sfr (P2 , 0xA0); 
  42      =1  Sbit (P2_7 , 0xA0, 7);
  43      =1  Sbit (P2_6 , 0xA0, 6);
  44      =1  Sbit (P2_5 , 0xA0, 5);
  45      =1  Sbit (P2_4 , 0xA0, 4);
  46      =1  Sbit (P2_3 , 0xA0, 3);
  47      =1  Sbit (P2_2 , 0xA0, 2);
  48      =1  Sbit (P2_1 , 0xA0, 1);
  49      =1  Sbit (P2_0 , 0xA0, 0);
  50      =1  
  51      =1         
  52      =1  Sfr (P3 , 0xB0);        
  53      =1  
  54      =1  Sbit (P3_7 , 0xB0, 7);
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 2   

  55      =1  Sbit (P3_6 , 0xB0, 6);
  56      =1  Sbit (P3_5 , 0xB0, 5);
  57      =1  Sbit (P3_4 , 0xB0, 4);
  58      =1  Sbit (P3_3 , 0xB0, 3);
  59      =1  Sbit (P3_2 , 0xB0, 2);
  60      =1  Sbit (P3_1 , 0xB0, 1);
  61      =1  Sbit (P3_0 , 0xB0, 0);
  62      =1  
  63      =1  Sbit (RD , 0xB0, 7);
  64      =1  Sbit (WR , 0xB0, 6);
  65      =1  Sbit (T1 , 0xB0, 5);
  66      =1  Sbit (T0 , 0xB0, 4);
  67      =1  Sbit (INT1 , 0xB0, 3);
  68      =1  Sbit (INT0 , 0xB0, 2);
  69      =1  Sbit (TXD , 0xB0, 1);
  70      =1  Sbit (RXD , 0xB0, 0);
  71      =1  
  72      =1  Sfr (P4 , 0xC0);        
  73      =1  Sbit (P4_7 , 0xC0, 7);
  74      =1  Sbit (P4_6 , 0xC0, 6);
  75      =1  Sbit (P4_5 , 0xC0, 5);
  76      =1  Sbit (P4_4 , 0xC0, 4);
  77      =1  Sbit (P4_3 , 0xC0, 3);
  78      =1  Sbit (P4_2 , 0xC0, 2);
  79      =1  Sbit (P4_1 , 0xC0, 1);
  80      =1  Sbit (P4_0 , 0xC0, 0);
  81      =1  
  82      =1  Sfr (P5 , 0xE8);        
  83      =1  Sbit (P5_7 , 0xE8, 7);
  84      =1  Sbit (P5_6 , 0xE8, 6);
  85      =1  Sbit (P5_5 , 0xE8, 5);
  86      =1  Sbit (P5_4 , 0xE8, 4);
  87      =1  Sbit (P5_3 , 0xE8, 3);
  88      =1  Sbit (P5_2 , 0xE8, 2);
  89      =1  Sbit (P5_1 , 0xE8, 1);
  90      =1  Sbit (P5_0 , 0xE8, 0);
  91      =1  
  92      =1      
  93      =1  Sfr (PSW , 0xD0);       
  94      =1  
  95      =1  Sbit (CY  , 0xD0  , 7);
  96      =1  Sbit (AC  , 0xD0  , 6);
  97      =1  Sbit (F0  , 0xD0  , 5);
  98      =1  Sbit (RS1 , 0xD0  , 4);
  99      =1  Sbit (RS0 , 0xD0  , 3);
 100      =1  Sbit (OV  , 0xD0  , 2);
 101      =1  Sbit (UD  , 0xD0  , 1);
 102      =1  Sbit (P   , 0xD0  , 0);
 103      =1  
 104      =1  Sfr (ACC , 0xE0);       
 105      =1  Sfr (B , 0xF0); 
 106      =1  Sfr (SP , 0x81);        
 107      =1  Sfr (DPL , 0x82);       
 108      =1  Sfr (DPH , 0x83);       
 109      =1  
 110      =1  Sfr (PCON , 0x87);      
 111      =1  Sfr (CKCON0 , 0x8F);     
 112      =1  Sfr (CKCON1 , 0xAF);
 113      =1  
 114      =1  /*------------------ TIMERS registers ---------------------*/
 115      =1  Sfr (TCON , 0x88);
 116      =1  Sbit (TF1 , 0x88, 7);
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 3   

 117      =1  Sbit (TR1 , 0x88, 6);
 118      =1  Sbit (TF0 , 0x88, 5);
 119      =1  Sbit (TR0 , 0x88, 4);
 120      =1  Sbit (IE1 , 0x88, 3);
 121      =1  Sbit (IT1 , 0x88, 2);
 122      =1  Sbit (IE0 , 0x88, 1);
 123      =1  Sbit (IT0 , 0x88, 0);
 124      =1          
 125      =1  Sfr (TMOD , 0x89);      
 126      =1  
 127      =1  Sfr  (T2CON , 0xC8);
 128      =1  Sbit (TF2   , 0xC8, 7);
 129      =1  Sbit (EXF2  , 0xC8, 6);
 130      =1  Sbit (RCLK  , 0xC8, 5);
 131      =1  Sbit (TCLK  , 0xC8, 4);
 132      =1  Sbit (EXEN2 , 0xC8, 3);
 133      =1  Sbit (TR2   , 0xC8, 2);
 134      =1  Sbit (C_T2  , 0xC8, 1);
 135      =1  Sbit (CP_RL2, 0xC8, 0);
 136      =1          
 137      =1  Sfr (T2MOD , 0xC9);     
 138      =1  Sfr (TL0 , 0x8A);       
 139      =1  Sfr (TL1 , 0x8B);       
 140      =1  Sfr (TL2 , 0xCC);       
 141      =1  Sfr (TH0 , 0x8C);       
 142      =1  Sfr (TH1 , 0x8D);       
 143      =1  Sfr (TH2 , 0xCD);       
 144      =1  Sfr (RCAP2L , 0xCA);    
 145      =1  Sfr (RCAP2H , 0xCB);    
 146      =1  Sfr (WDTRST , 0xA6);    
 147      =1  Sfr (WDTPRG , 0xA7);    
 148      =1  
 149      =1  
 150      =1  /*------------------- UART registers ------------------------*/
 151      =1  Sfr (SCON , 0x98);      
 152      =1  Sbit (SM0  , 0x98, 7);
 153      =1  Sbit (FE   , 0x98, 7);
 154      =1  Sbit (SM1  , 0x98, 6);
 155      =1  Sbit (SM2  , 0x98, 5);
 156      =1  Sbit (REN  , 0x98, 4);
 157      =1  Sbit (TB8  , 0x98, 3);
 158      =1  Sbit (RB8  , 0x98, 2);
 159      =1  Sbit (TI   , 0x98, 1);
 160      =1  Sbit (RI   , 0x98, 0);
 161      =1  
 162      =1  Sfr (SBUF , 0x99);      
 163      =1  Sfr (SADEN , 0xB9);     
 164      =1  Sfr (SADDR , 0xA9);     
 165      =1  
 166      =1  /*-------------------- Internal Baud Rate Generator --------*/
 167      =1  Sfr (BRL        , 0x9A);      
 168      =1  Sfr (BDRCON , 0x9B);      
 169      =1  
 170      =1  
 171      =1  
 172      =1  /*-------------------- IT registers -----------------------*/
 173      =1  Sfr (IEN0  , 0xA8);      
 174      =1  Sfr (IEN1  , 0xB1);      
 175      =1  Sfr (IPH0 , 0xB7);      
 176      =1  Sfr (IPH1 , 0xB3);      
 177      =1  Sfr (IPL0 , 0xB8);      
 178      =1  Sfr (IPL1 , 0xB2);      
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 4   

 179      =1  
 180      =1  
 181      =1  
 182      =1  /*  IEN0  */
 183      =1  Sbit (EA   , 0xA8, 7);
 184      =1  Sbit (EC   , 0xA8, 6);
 185      =1  Sbit (ET2  , 0xA8, 5);
 186      =1  Sbit (ES   , 0xA8, 4);
 187      =1  Sbit (ET1  , 0xA8, 3);
 188      =1  Sbit (EX1  , 0xA8, 2);
 189      =1  Sbit (ET0  , 0xA8, 1);
 190      =1  Sbit (EX0  , 0xA8, 0);
 191      =1  
 192      =1  
 193      =1  /*--------------------- PCA registers -----------------------------*/
 194      =1  Sfr (CCON , 0xD8);      
 195      =1  Sfr (CMOD , 0xD9);      
 196      =1  Sfr (CH , 0xF9);        
 197      =1  Sfr (CL , 0xE9);        
 198      =1  Sfr (CCAP0H  , 0xFA);   
 199      =1  Sfr (CCAP0L  , 0xEA);   
 200      =1  Sfr (CCAPM0  , 0xDA);   
 201      =1  Sfr (CCAP1H  , 0xFB);   
 202      =1  Sfr (CCAP1L  , 0xEB);   
 203      =1  Sfr (CCAPM1  , 0xDB);   
 204      =1  Sfr (CCAP2H  , 0xFC);   
 205      =1  Sfr (CCAP2L  , 0xEC);   
 206      =1  Sfr (CCAPM2  , 0xDC);   
 207      =1  Sfr (CCAP3H  , 0xFD);   
 208      =1  Sfr (CCAP3L  , 0xED);   
 209      =1  Sfr (CCAPM3  , 0xDD);   
 210      =1  Sfr (CCAP4H  , 0xFE);   
 211      =1  Sfr (CCAP4L  , 0xEE);   
 212      =1  Sfr (CCAPM4  , 0xDE);   
 213      =1  /* CCON */
 214      =1  Sbit (CF   , 0xD8, 7);
 215      =1  Sbit (CR   , 0xD8, 6);
 216      =1  
 217      =1  Sbit (CCF4   , 0xD8, 4);
 218      =1  Sbit (CCF3  , 0xD8, 3);
 219      =1  Sbit (CCF2  , 0xD8, 2);
 220      =1  Sbit (CCF1  , 0xD8, 1);
 221      =1  Sbit (CCF0  , 0xD8, 0);
 222      =1  
 223      =1  
 224      =1  /*------------------ T W I registers ------------------------------*/
 225      =1  Sfr ( SSCON , 0x93);
 226      =1  Sfr ( SSCS , 0x94);
 227      =1  Sfr ( SSDAT , 0x95);
 228      =1  Sfr ( SSADR , 0x96);
 229      =1  Sfr ( PI2       , 0xF8);        
 230      =1  Sbit (PI2_1  , 0xF8, 1);
 231      =1  Sbit (PI2_0  , 0xF8, 0);
 232      =1  
 233      =1  /*-------------------- OSC control registers ----------------------*/
 234      =1  Sfr ( CKSEL , 0x85 );
 235      =1  Sfr ( OSCCON , 0x86 );
 236      =1  Sfr ( CKRL , 0x97 );
 237      =1  
 238      =1  /*-------------------- Keyboard control registers -----------------*/
 239      =1  Sfr ( KBLS , 0x9C );
 240      =1  Sfr ( KBE , 0x9D );
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 5   

 241      =1  Sfr ( KBF , 0x9E );
 242      =1  /*-------------------- SPI ---------------------- -----------------*/
 243      =1  Sfr ( SPCON, 0xC3 );
 244      =1  Sfr ( SPSTA, 0xC4 );
 245      =1  Sfr ( SPDAT, 0xC5 );
 246      =1  
 247      =1  /*------ Misc ----------------------------------------------------*/
 248      =1  Sfr     ( AUXR , 0x8E);
 249      =1  Sfr ( AUXR1, 0xA2);
 250      =1  Sfr ( FCON, 0xD1);
 251      =1  
 252      =1  
 253      =1  /*------ E data --------------------------------------------------*/
 254      =1  
 255      =1  Sfr ( EECON,  0xD2 );
 256      =1  
 257      =1  
 258      =1  
 259      =1  
 260      =1  
 261      =1  
 262      =1  
 263      =1  
 264      =1  
   2          
   3          void lcd_data(unsigned char);
   4          void lcd_init();
   5          void lcd_cmd(unsigned char);
   6          void msdelay(unsigned int);
   7          
   8          sbit c1=P1^4;
   9          sbit c2=P1^5;
  10          sbit c3=P1^6;
  11          sbit r1=P1^0;
  12          sbit r2=P1^1;
  13          sbit r3=P1^2;
  14          sbit r4=P1^3;
  15          sbit dc1=P3^0;
  16          int eflag=0;
  17          int cl=0;
  18          
  19          void lock();
  20          void unlock();
  21          void row_finder1();
  22          void row_finder2();
  23          void row_finder3();
  24          void print_wc();
  25          void print_enter();
  26          void print_grant();
  27          void print_deny();
  28          int strcheck(char [],char []);
  29          
  30          unsigned char wc[8]="Welcome!";
  31          unsigned char en[15]="Enter Password.";
  32          unsigned char grant[15]="Access Granted!";
  33          unsigned char deny[14]="Access Denied!";
  34          unsigned char pass[5]="12345";
  35          unsigned char ip[5]="";
  36          
  37          void main()
  38          {
  39   1              dc1=0;
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 6   

  40   1          //unsigned char a[15]="hex value is";    //string of 14 characters with a null terminator.
  41   1          /*while(a[l] != '\0') // searching the null terminator in the sentence
  42   1          {
  43   1              lcd_data(a[l]);
  44   1              l++;
  45   1              msdelay(50);
  46   1          }  */
  47   1              print_wc();
  48   1              msdelay(100);
  49   1              print_enter();
  50   1              lcd_cmd(0xc4);
  51   1              
  52   1                       msdelay(30); 
  53   1                       //do{
  54   1                       while(1)
  55   1                       {
  56   2                              c1=c2=c3=1;
  57   2                      r1=r2=r3=r4=0;
  58   2                               if(c1==0)
  59   2                         row_finder1();
  60   2                       else if(c2==0)
  61   2                         row_finder2();
  62   2                       else if(c3==0)
  63   2                         row_finder3();
  64   2                              if(eflag==1)
  65   2                              break;
  66   2                              msdelay(30);
  67   2                      }          
  68   1                      if(strcheck(pass,ip)==0)
  69   1                      {
  70   2                              print_grant();
  71   2                              unlock();
  72   2                              msdelay(200);
  73   2                              lock();
  74   2                              msdelay(200);
  75   2                      }
  76   1                      else
  77   1                      print_deny();
  78   1      
  79   1                              //}while(eflag!=1);
  80   1      }
  81          
  82          void print_wc()
  83          {
  84   1              int l=0;
  85   1              lcd_init();
  86   1              while(wc[l] != '\0') // searching the null terminator in the sentence
  87   1          {
  88   2              lcd_data(wc[l]);
  89   2              l++;
  90   2              msdelay(5);
  91   2          }
  92   1      }
  93          
  94          void print_enter()
  95          {
  96   1              int l=0;
  97   1              lcd_init();
  98   1              while(en[l] != '\0') // searching the null terminator in the sentence
  99   1          {
 100   2              lcd_data(en[l]);
 101   2              l++;
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 7   

 102   2              msdelay(5);
 103   2          }
 104   1      }
 105          
 106          void print_grant()
 107          {
 108   1              int l=0;
 109   1              lcd_init();
 110   1              for(l=0;l<14;l++)
 111   1              {
 112   2                      lcd_data(grant[l]);
 113   2                      msdelay(5);
 114   2              }
 115   1              /*while(grant[l] != '\0') // searching the null terminator in the sentence
 116   1          {
 117   1              lcd_data(grant[l]);
 118   1              l++;
 119   1              msdelay(5);
 120   1          }                    */
 121   1      }
 122          
 123          void print_deny()
 124          {
 125   1              int l=0;
 126   1              lcd_init();
 127   1              for(l=0;l<14;l++)
 128   1              {
 129   2                      lcd_data(deny[l]);
 130   2                      msdelay(5);
 131   2              }
 132   1              /*while(deny[l] != '\0') // searching the null terminator in the sentence
 133   1          {
 134   1              lcd_data(deny[l]);
 135   1              l++;
 136   1              msdelay(5);
 137   1          }*/
 138   1      }
 139          
 140          
 141          int strcheck(char p[],char b[])
 142          {
 143   1              int c;
 144   1              int flag=0;
 145   1              while(p[c]!= '\0' )
 146   1              {                                                       //checks passwords
 147   2                      if(p[c]!=b[c])
 148   2                               flag=1;
 149   2                      c++;
 150   2              }
 151   1              return flag;
 152   1      }
 153          
 154          
 155          void row_finder1() //Function for finding the row for column 1
 156          {
 157   1              r1=r2=r3=r4=1;
 158   1              c1=c2=c3=0;
 159   1              
 160   1              if(r1==0)
 161   1              {
 162   2                      lcd_data('1');
 163   2                      ip[cl]='1';
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 8   

 164   2                      cl++;
 165   2               }
 166   1              if(r2==0)
 167   1              {
 168   2                      lcd_data('4');
 169   2                      ip[cl]='4';
 170   2                      cl++;
 171   2              }
 172   1              if(r3==0)
 173   1              {
 174   2              lcd_data('7');
 175   2              ip[cl]='7';
 176   2                      cl++;
 177   2               }
 178   1              if(r4==0)
 179   1              {
 180   2              lcd_data('*');
 181   2              ip[cl]='*';
 182   2                      cl++;
 183   2              }
 184   1      }
 185          
 186          void row_finder2() //Function for finding the row for column 2
 187          {
 188   1              r1=r2=r3=r4=1;
 189   1              c1=c2=c3=0;
 190   1              
 191   1              if(r1==0)
 192   1              {
 193   2              lcd_data('2');
 194   2              ip[cl]='2';
 195   2                      cl++;
 196   2              }
 197   1              if(r2==0)
 198   1              {
 199   2              lcd_data('5');
 200   2              ip[cl]='5';
 201   2                      cl++;
 202   2              }
 203   1              if(r3==0)
 204   1              {
 205   2              lcd_data('8');
 206   2              ip[cl]='8';
 207   2                      cl++;
 208   2              }
 209   1              if(r4==0)
 210   1              {
 211   2              lcd_data('0');
 212   2              ip[cl]='0';
 213   2                      cl++;
 214   2              }
 215   1      }
 216          
 217          void row_finder3() //Function for finding the row for column 3
 218          {
 219   1              r1=r2=r3=r4=1;
 220   1              c1=c2=c3=0;
 221   1              
 222   1              if(r1==0)         {
 223   2              lcd_data('3');
 224   2              ip[cl]='3';
 225   2                      cl++;
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 9   

 226   2                      }
 227   1              if(r2==0)
 228   1              {
 229   2              lcd_data('6');
 230   2              ip[cl]='6';
 231   2                      cl++;
 232   2              }
 233   1              if(r3==0)
 234   1              {
 235   2              lcd_data('9');
 236   2              ip[cl]='9';
 237   2                      cl++;
 238   2              }
 239   1              if(r4==0)
 240   1              {
 241   2                      lcd_data('#');
 242   2                      eflag=1;
 243   2              }
 244   1      }
 245          
 246          void lock()
 247          {
 248   1              dc1=0;
 249   1      }
 250          
 251          void unlock()
 252          {
 253   1              dc1=1;
 254   1      }
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0000 C2B0              CLR     dc1
                                           ; SOURCE LINE # 47
0002 120000      R     LCALL   print_wc
                                           ; SOURCE LINE # 48
0005 7F64              MOV     R7,#064H
0007 7E00              MOV     R6,#00H
0009 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 49
000C 120000      R     LCALL   print_enter
                                           ; SOURCE LINE # 50
000F 7FC4              MOV     R7,#0C4H
0011 120000      E     LCALL   _lcd_cmd
                                           ; SOURCE LINE # 52
0014 802C              SJMP    ?C0063
0016         ?C0001:
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0016 D296              SETB    c3
0018 D295              SETB    c2
001A D294              SETB    c1
                                           ; SOURCE LINE # 57
001C C293              CLR     r4
001E C292              CLR     r3
0020 C291              CLR     r2
0022 C290              CLR     r1
                                           ; SOURCE LINE # 58
0024 209405            JB      c1,?C0003
                                           ; SOURCE LINE # 59
0027 120000      R     LCALL   row_finder1
002A 800E              SJMP    ?C0004
002C         ?C0003:
                                           ; SOURCE LINE # 60
002C 209505            JB      c2,?C0005
                                           ; SOURCE LINE # 61
002F 120000      R     LCALL   row_finder2
0032 8006              SJMP    ?C0004
0034         ?C0005:
                                           ; SOURCE LINE # 62
0034 209603            JB      c3,?C0004
                                           ; SOURCE LINE # 63
0037 120000      R     LCALL   row_finder3
003A         ?C0004:
                                           ; SOURCE LINE # 64
003A E500        R     MOV     A,eflag+01H
003C 6401              XRL     A,#01H
003E 4500        R     ORL     A,eflag
0040 6009              JZ      ?C0002
                                           ; SOURCE LINE # 65
0042         ?C0008:
                                           ; SOURCE LINE # 66
0042         ?C0063:
0042 7F1E              MOV     R7,#01EH
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _msdelay
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 11  

                                           ; SOURCE LINE # 67
0049 80CB              SJMP    ?C0001
004B         ?C0002:
                                           ; SOURCE LINE # 68
004B 750000      R     MOV     ?_strcheck?BYTE+03H,#00H
004E 750000      R     MOV     ?_strcheck?BYTE+04H,#HIGH ip
0051 750000      R     MOV     ?_strcheck?BYTE+05H,#LOW ip
0054 7B00              MOV     R3,#00H
0056 7A00        R     MOV     R2,#HIGH pass
0058 7900        R     MOV     R1,#LOW pass
005A 120000      R     LCALL   _strcheck
005D EF                MOV     A,R7
005E 4E                ORL     A,R6
005F 7017              JNZ     ?C0009
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
0061 120000      R     LCALL   print_grant
                                           ; SOURCE LINE # 71
0064 120000      R     LCALL   unlock
                                           ; SOURCE LINE # 72
0067 7FC8              MOV     R7,#0C8H
0069 7E00              MOV     R6,#00H
006B 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 73
006E 120000      R     LCALL   lock
                                           ; SOURCE LINE # 74
0071 7FC8              MOV     R7,#0C8H
0073 7E00              MOV     R6,#00H
0075 020000      E     LJMP    _msdelay
                                           ; SOURCE LINE # 75
0078         ?C0009:
                                           ; SOURCE LINE # 77
0078 120000      R     LCALL   print_deny
                                           ; SOURCE LINE # 80
007B         ?C0011:
007B 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION print_wc (BEGIN)
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0000 E4                CLR     A
0001 F500        R     MOV     l,A
0003 F500        R     MOV     l+01H,A
                                           ; SOURCE LINE # 85
0005 120000      E     LCALL   lcd_init
0008         ?C0012:
                                           ; SOURCE LINE # 86
0008 7400        R     MOV     A,#LOW wc
000A 2500        R     ADD     A,l+01H
000C F8                MOV     R0,A
000D E6                MOV     A,@R0
000E FF                MOV     R7,A
000F 6014              JZ      ?C0014
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0011 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 89
0014 0500        R     INC     l+01H
0016 E500        R     MOV     A,l+01H
0018 7002              JNZ     ?C0047
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 12  

001A 0500        R     INC     l
001C         ?C0047:
                                           ; SOURCE LINE # 90
001C 7F05              MOV     R7,#05H
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 91
0023 80E3              SJMP    ?C0012
                                           ; SOURCE LINE # 92
0025         ?C0014:
0025 22                RET     
             ; FUNCTION print_wc (END)

             ; FUNCTION print_enter (BEGIN)
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 E4                CLR     A
0001 F500        R     MOV     l,A
0003 F500        R     MOV     l+01H,A
                                           ; SOURCE LINE # 97
0005 120000      E     LCALL   lcd_init
0008         ?C0015:
                                           ; SOURCE LINE # 98
0008 7400        R     MOV     A,#LOW en
000A 2500        R     ADD     A,l+01H
000C F8                MOV     R0,A
000D E6                MOV     A,@R0
000E FF                MOV     R7,A
000F 6014              JZ      ?C0017
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0011 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 101
0014 0500        R     INC     l+01H
0016 E500        R     MOV     A,l+01H
0018 7002              JNZ     ?C0048
001A 0500        R     INC     l
001C         ?C0048:
                                           ; SOURCE LINE # 102
001C 7F05              MOV     R7,#05H
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 103
0023 80E3              SJMP    ?C0015
                                           ; SOURCE LINE # 104
0025         ?C0017:
0025 22                RET     
             ; FUNCTION print_enter (END)

             ; FUNCTION print_grant (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
0000 E4                CLR     A
0001 F500        R     MOV     l,A
0003 F500        R     MOV     l+01H,A
                                           ; SOURCE LINE # 109
0005 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 110
0008 E4                CLR     A
0009 F500        R     MOV     l,A
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 13  

000B F500        R     MOV     l+01H,A
000D         ?C0018:
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
000D 7400        R     MOV     A,#LOW grant
000F 2500        R     ADD     A,l+01H
0011 F8                MOV     R0,A
0012 E6                MOV     A,@R0
0013 FF                MOV     R7,A
0014 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 113
0017 7F05              MOV     R7,#05H
0019 7E00              MOV     R6,#00H
001B 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 114
001E 0500        R     INC     l+01H
0020 E500        R     MOV     A,l+01H
0022 7002              JNZ     ?C0049
0024 0500        R     INC     l
0026         ?C0049:
0026 C3                CLR     C
0027 940E              SUBB    A,#0EH
0029 E500        R     MOV     A,l
002B 6480              XRL     A,#080H
002D 9480              SUBB    A,#080H
002F 40DC              JC      ?C0018
                                           ; SOURCE LINE # 121
0031         ?C0021:
0031 22                RET     
             ; FUNCTION print_grant (END)

             ; FUNCTION print_deny (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 E4                CLR     A
0001 F500        R     MOV     l,A
0003 F500        R     MOV     l+01H,A
                                           ; SOURCE LINE # 126
0005 120000      E     LCALL   lcd_init
                                           ; SOURCE LINE # 127
0008 E4                CLR     A
0009 F500        R     MOV     l,A
000B F500        R     MOV     l+01H,A
000D         ?C0022:
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
000D 7400        R     MOV     A,#LOW deny
000F 2500        R     ADD     A,l+01H
0011 F8                MOV     R0,A
0012 E6                MOV     A,@R0
0013 FF                MOV     R7,A
0014 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 130
0017 7F05              MOV     R7,#05H
0019 7E00              MOV     R6,#00H
001B 120000      E     LCALL   _msdelay
                                           ; SOURCE LINE # 131
001E 0500        R     INC     l+01H
0020 E500        R     MOV     A,l+01H
0022 7002              JNZ     ?C0050
0024 0500        R     INC     l
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 14  

0026         ?C0050:
0026 C3                CLR     C
0027 940E              SUBB    A,#0EH
0029 E500        R     MOV     A,l
002B 6480              XRL     A,#080H
002D 9480              SUBB    A,#080H
002F 40DC              JC      ?C0022
                                           ; SOURCE LINE # 138
0031         ?C0025:
0031 22                RET     
             ; FUNCTION print_deny (END)

             ; FUNCTION _strcheck (BEGIN)
                                           ; SOURCE LINE # 141
0000 8B00        R     MOV     p,R3
0002 8A00        R     MOV     p+01H,R2
0004 8900        R     MOV     p+02H,R1
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
0006 E4                CLR     A
0007 F500        R     MOV     flag,A
0009 F500        R     MOV     flag+01H,A
000B         ?C0026:
                                           ; SOURCE LINE # 145
000B AB00        R     MOV     R3,p
000D AA00        R     MOV     R2,p+01H
000F A900        R     MOV     R1,p+02H
0011 850082      R     MOV     DPL,c+01H
0014 850083      R     MOV     DPH,c
0017 120000      E     LCALL   ?C?CLDOPTR
001A FF                MOV     R7,A
001B 6022              JZ      ?C0027
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
001D AB00        R     MOV     R3,b
001F AA00        R     MOV     R2,b+01H
0021 A900        R     MOV     R1,b+02H
0023 850082      R     MOV     DPL,c+01H
0026 850083      R     MOV     DPH,c
0029 120000      E     LCALL   ?C?CLDOPTR
002C 6F                XRL     A,R7
002D 6006              JZ      ?C0028
                                           ; SOURCE LINE # 148
002F 750000      R     MOV     flag,#00H
0032 750001      R     MOV     flag+01H,#01H
0035         ?C0028:
                                           ; SOURCE LINE # 149
0035 0500        R     INC     c+01H
0037 E500        R     MOV     A,c+01H
0039 70D0              JNZ     ?C0026
003B 0500        R     INC     c
003D         ?C0051:
                                           ; SOURCE LINE # 150
003D 80CC              SJMP    ?C0026
003F         ?C0027:
                                           ; SOURCE LINE # 151
003F AE00        R     MOV     R6,flag
0041 AF00        R     MOV     R7,flag+01H
                                           ; SOURCE LINE # 152
0043         ?C0029:
0043 22                RET     
             ; FUNCTION _strcheck (END)
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 15  


             ; FUNCTION row_finder1 (BEGIN)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0000 D293              SETB    r4
0002 D292              SETB    r3
0004 D291              SETB    r2
0006 D290              SETB    r1
                                           ; SOURCE LINE # 158
0008 C296              CLR     c3
000A C295              CLR     c2
000C C294              CLR     c1
                                           ; SOURCE LINE # 160
000E 209014            JB      r1,?C0030
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0011 7F31              MOV     R7,#031H
0013 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 163
0016 7400        R     MOV     A,#LOW ip
0018 2500        R     ADD     A,cl+01H
001A F8                MOV     R0,A
001B 7631              MOV     @R0,#031H
                                           ; SOURCE LINE # 164
001D 0500        R     INC     cl+01H
001F E500        R     MOV     A,cl+01H
0021 7002              JNZ     ?C0052
0023 0500        R     INC     cl
0025         ?C0052:
                                           ; SOURCE LINE # 165
0025         ?C0030:
                                           ; SOURCE LINE # 166
0025 209114            JB      r2,?C0031
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0028 7F34              MOV     R7,#034H
002A 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 169
002D 7400        R     MOV     A,#LOW ip
002F 2500        R     ADD     A,cl+01H
0031 F8                MOV     R0,A
0032 7634              MOV     @R0,#034H
                                           ; SOURCE LINE # 170
0034 0500        R     INC     cl+01H
0036 E500        R     MOV     A,cl+01H
0038 7002              JNZ     ?C0053
003A 0500        R     INC     cl
003C         ?C0053:
                                           ; SOURCE LINE # 171
003C         ?C0031:
                                           ; SOURCE LINE # 172
003C 209214            JB      r3,?C0032
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
003F 7F37              MOV     R7,#037H
0041 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 175
0044 7400        R     MOV     A,#LOW ip
0046 2500        R     ADD     A,cl+01H
0048 F8                MOV     R0,A
0049 7637              MOV     @R0,#037H
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 16  

                                           ; SOURCE LINE # 176
004B 0500        R     INC     cl+01H
004D E500        R     MOV     A,cl+01H
004F 7002              JNZ     ?C0054
0051 0500        R     INC     cl
0053         ?C0054:
                                           ; SOURCE LINE # 177
0053         ?C0032:
                                           ; SOURCE LINE # 178
0053 209314            JB      r4,?C0034
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0056 7F2A              MOV     R7,#02AH
0058 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 181
005B 7400        R     MOV     A,#LOW ip
005D 2500        R     ADD     A,cl+01H
005F F8                MOV     R0,A
0060 762A              MOV     @R0,#02AH
                                           ; SOURCE LINE # 182
0062 0500        R     INC     cl+01H
0064 E500        R     MOV     A,cl+01H
0066 7002              JNZ     ?C0055
0068 0500        R     INC     cl
006A         ?C0055:
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
006A         ?C0034:
006A 22                RET     
             ; FUNCTION row_finder1 (END)

             ; FUNCTION row_finder2 (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0000 D293              SETB    r4
0002 D292              SETB    r3
0004 D291              SETB    r2
0006 D290              SETB    r1
                                           ; SOURCE LINE # 189
0008 C296              CLR     c3
000A C295              CLR     c2
000C C294              CLR     c1
                                           ; SOURCE LINE # 191
000E 209014            JB      r1,?C0035
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0011 7F32              MOV     R7,#032H
0013 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 194
0016 7400        R     MOV     A,#LOW ip
0018 2500        R     ADD     A,cl+01H
001A F8                MOV     R0,A
001B 7632              MOV     @R0,#032H
                                           ; SOURCE LINE # 195
001D 0500        R     INC     cl+01H
001F E500        R     MOV     A,cl+01H
0021 7002              JNZ     ?C0056
0023 0500        R     INC     cl
0025         ?C0056:
                                           ; SOURCE LINE # 196
0025         ?C0035:
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 17  

                                           ; SOURCE LINE # 197
0025 209114            JB      r2,?C0036
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0028 7F35              MOV     R7,#035H
002A 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 200
002D 7400        R     MOV     A,#LOW ip
002F 2500        R     ADD     A,cl+01H
0031 F8                MOV     R0,A
0032 7635              MOV     @R0,#035H
                                           ; SOURCE LINE # 201
0034 0500        R     INC     cl+01H
0036 E500        R     MOV     A,cl+01H
0038 7002              JNZ     ?C0057
003A 0500        R     INC     cl
003C         ?C0057:
                                           ; SOURCE LINE # 202
003C         ?C0036:
                                           ; SOURCE LINE # 203
003C 209214            JB      r3,?C0037
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
003F 7F38              MOV     R7,#038H
0041 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 206
0044 7400        R     MOV     A,#LOW ip
0046 2500        R     ADD     A,cl+01H
0048 F8                MOV     R0,A
0049 7638              MOV     @R0,#038H
                                           ; SOURCE LINE # 207
004B 0500        R     INC     cl+01H
004D E500        R     MOV     A,cl+01H
004F 7002              JNZ     ?C0058
0051 0500        R     INC     cl
0053         ?C0058:
                                           ; SOURCE LINE # 208
0053         ?C0037:
                                           ; SOURCE LINE # 209
0053 209314            JB      r4,?C0039
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0056 7F30              MOV     R7,#030H
0058 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 212
005B 7400        R     MOV     A,#LOW ip
005D 2500        R     ADD     A,cl+01H
005F F8                MOV     R0,A
0060 7630              MOV     @R0,#030H
                                           ; SOURCE LINE # 213
0062 0500        R     INC     cl+01H
0064 E500        R     MOV     A,cl+01H
0066 7002              JNZ     ?C0059
0068 0500        R     INC     cl
006A         ?C0059:
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
006A         ?C0039:
006A 22                RET     
             ; FUNCTION row_finder2 (END)

             ; FUNCTION row_finder3 (BEGIN)
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 18  

                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 D293              SETB    r4
0002 D292              SETB    r3
0004 D291              SETB    r2
0006 D290              SETB    r1
                                           ; SOURCE LINE # 220
0008 C296              CLR     c3
000A C295              CLR     c2
000C C294              CLR     c1
                                           ; SOURCE LINE # 222
000E 209014            JB      r1,?C0040
                                           ; SOURCE LINE # 223
0011 7F33              MOV     R7,#033H
0013 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 224
0016 7400        R     MOV     A,#LOW ip
0018 2500        R     ADD     A,cl+01H
001A F8                MOV     R0,A
001B 7633              MOV     @R0,#033H
                                           ; SOURCE LINE # 225
001D 0500        R     INC     cl+01H
001F E500        R     MOV     A,cl+01H
0021 7002              JNZ     ?C0060
0023 0500        R     INC     cl
0025         ?C0060:
                                           ; SOURCE LINE # 226
0025         ?C0040:
                                           ; SOURCE LINE # 227
0025 209114            JB      r2,?C0041
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0028 7F36              MOV     R7,#036H
002A 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 230
002D 7400        R     MOV     A,#LOW ip
002F 2500        R     ADD     A,cl+01H
0031 F8                MOV     R0,A
0032 7636              MOV     @R0,#036H
                                           ; SOURCE LINE # 231
0034 0500        R     INC     cl+01H
0036 E500        R     MOV     A,cl+01H
0038 7002              JNZ     ?C0061
003A 0500        R     INC     cl
003C         ?C0061:
                                           ; SOURCE LINE # 232
003C         ?C0041:
                                           ; SOURCE LINE # 233
003C 209214            JB      r3,?C0042
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
003F 7F39              MOV     R7,#039H
0041 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 236
0044 7400        R     MOV     A,#LOW ip
0046 2500        R     ADD     A,cl+01H
0048 F8                MOV     R0,A
0049 7639              MOV     @R0,#039H
                                           ; SOURCE LINE # 237
004B 0500        R     INC     cl+01H
004D E500        R     MOV     A,cl+01H
C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 19  

004F 7002              JNZ     ?C0062
0051 0500        R     INC     cl
0053         ?C0062:
                                           ; SOURCE LINE # 238
0053         ?C0042:
                                           ; SOURCE LINE # 239
0053 20930B            JB      r4,?C0044
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0056 7F23              MOV     R7,#023H
0058 120000      E     LCALL   _lcd_data
                                           ; SOURCE LINE # 242
005B 750000      R     MOV     eflag,#00H
005E 750001      R     MOV     eflag+01H,#01H
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0061         ?C0044:
0061 22                RET     
             ; FUNCTION row_finder3 (END)

             ; FUNCTION lock (BEGIN)
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0000 C2B0              CLR     dc1
                                           ; SOURCE LINE # 249
0002 22                RET     
             ; FUNCTION lock (END)

             ; FUNCTION unlock (BEGIN)
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0000 D2B0              SETB    dc1
                                           ; SOURCE LINE # 254
0002 22                RET     
             ; FUNCTION unlock (END)

C51 COMPILER V7.50   PROT                                                                  04/05/2019 20:13:13 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
eflag. . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0000H  2
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
unlock . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_lcd_data. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
c1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
c2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
c3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
grant. . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0002H  15
r1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
r2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
r3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
r4 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_lcd_cmd . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
lock . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
print_grant. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  l. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
deny . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0011H  14
print_enter. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  l. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
pass . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    001FH  5
_strcheck. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  p. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  b. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  c. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  flag . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0008H  2
print_deny . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  l. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
lcd_init . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
cl . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0024H  2
en . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0026H  15
_msdelay . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ip . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0035H  5
wc . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    003AH  8
row_finder1. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
row_finder2. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
row_finder3. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
print_wc . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  l. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
dc1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    686    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     66      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
